Отчёт по лабораторной работе №1

1. Для начала скачала git

2. провела первоначальную настройку системы контроля версий git:
1) указала имя и адрес эл почты
$git config --global user.name "Alina"
$git config --global user.email "dushkina.alina@bk.ru"
2)параметры окончания строки
$git config --global core.autocrlf true
$git config --global core.safecrlf true

3. создала каталог проекта «Лаба1»

4. Затем инициализировала каталог в системе git:
$git init

5. в каталоге проекта создала текстовый файл отчёта DushkinaAE_LR1.txt в кодировке Win 1251
Проиндексировала файл с помощью команды
$git add DushkinaAE_LR1.txt

6.сделала первый коммит
$git commit –m “commit1” (“commit1”- комментарий)

7.Добавила в этот файл текст, написанный выше.
Проиндексировала изменения

8.Сделала второй коммит также как и первый, изменив комментарий 

9.Демонстрация действий с файлами 
1)Игнорирование:
  -создала в каталоге файл с расширением .gitignore
       $ touch .gitignore
       $git config --global core.exludesfile~/.gitignore
  -создала в каталоге файл excess.txt
  -записала имя этого файла в файл с расширением .gitignore
  Таким образом, файл игнорируется системой.
  Дополнительные команды:
     $git status --ignored   -  просмотр проигнорированных файлов
2)Сравнение:
   -сравнение изменений в рабочей директории
      $git diff
3)Удаление:
   -создала файл delete.txt
   -проиндексировала его
     $git add delete.txt 
   -удалила
     $git rm -f delete.txt
4)Перемещение:
   -создала дополнительный каталог
       $mkdir dop
   -инициализировала его
      $git add dop
   -создала новый файл move.txt
   -инициализировла его
      $git  add move.txt 
   -переместила
      $git mv move.txt dop

10.Демонстрация механизма работы с командой git log:
    $git log перечисляются коммиты, сделанные в этом репозитории в обратном хронологическом порядке; то есть самые последние коммиты появляются первыми.
    $ git log --stat  если вы хотите увидеть некоторые сокращенные статистические данные для каждой фиксации, вы можете использовать эту опцию
    $ git log --pretty=oneline Значение этого параметра выводит каждый коммит в одной строке, что полезно, если вы просматриваете много коммитов.

11.Демонстрация механизма отмены сделанных изменений и работы с метками:
  Отмена изменений:
    -создала файл dop.txt
    -инициализировала его
    -создала коммит
    -отменила действия 
        $git revert HEAD
  Работа с метками:
  1) создание метки 
     $ git tag -a (1) -m (2)   ( (1)-имя метки, (2)-выбранный коммит)
  2) перечисление меток
     $ git tag 
  3) просмотр данных метки
      $ git show (1)   ( (1)-имя метки)
    Это показывает информацию о метке, дату, когда фиксация была помечена, и сообщение аннотации перед отображением информации о фиксации.
  4)удаление метки
      $ git tag -d (1)  ( (1)-имя метки)

12.Ветки
  $ git branch   просмотр активных веток
  1)создание ветки
    $ git checkout -b (1) ( (1) - имя ветки)
  2)перемещение по веткам
    $git checkout (1)  ( (1) - имя ветки, на которую хотите переместиться)
  3)объединение веток
    $git merge (1) ( (1) - имя ветки, которую хотите объединить с данной)
  4)удаление 
    $ git branch -d (1)  ( (1) - имя ветки, которую хотите удалить)
  5)решение конфликтов слияния 
     Конфликт: Создали файл.Перешли на недавно создавшуюся ветку.Изменили файл, сохранили, инициализировала его.
     Сделали коммит. Перешли на ветку, на которой были. Изменили файл, сохранили, инициализировали. Сделали коммит.
     Объединяем новую ветку с данной. Видим, что образовался конфликт
    Чтобы исправить данную ситуацию, нужно, находясь на исходных ветках, изменить файл так, чтобы было одинаковое содержание, снова произвести команду объединения
13.Механизм прятанья 
$git stash - скрывает внесённые изменения в ранее созданный файл 
$git stash apply - позволяет использовать скрытые изменения, но при этом оставить их в stash


    